////
/// @group components/button
////

/// Button component background colour
///
/// @type Colour
/// @access public

$govuk-button-background-colour: govuk-colour("blue") !default;

/// Button component text colour
///
/// @type Colour
/// @access public

$govuk-button-text-colour: govuk-colour("white") !default;

/// Inverted button component background colour
///
/// @type Colour
/// @access public

$govuk-inverse-button-background-colour: govuk-colour("white") !default;

/// Inverted button component text colour
///
/// @type Colour
/// @access public

$govuk-inverse-button-text-colour: $govuk-brand-colour !default;

@include govuk-exports("govuk/component/button") {
  $govuk-button-colour: $govuk-button-background-colour;
  $govuk-button-text-colour: $govuk-button-text-colour;
  $govuk-button-hover-colour: govuk-shade($govuk-button-colour, 20%);
  $govuk-button-shadow-colour: govuk-shade($govuk-button-colour, 60%);

  // Secondary button variables
  $govuk-secondary-button-colour: govuk-colour("light-grey");
  $govuk-secondary-button-text-colour: govuk-colour("black");
  $govuk-secondary-button-hover-colour: govuk-shade($govuk-secondary-button-colour, 10%);
  $govuk-secondary-button-shadow-colour: govuk-shade($govuk-secondary-button-colour, 40%);

  // Warning button variables
  $govuk-warning-button-colour: govuk-colour("red");
  $govuk-warning-button-text-colour: govuk-colour("white");
  $govuk-warning-button-hover-colour: govuk-shade($govuk-warning-button-colour, 20%);
  $govuk-warning-button-shadow-colour: govuk-shade($govuk-warning-button-colour, 60%);

  // Inverse button variables
  $govuk-inverse-button-colour: $govuk-inverse-button-background-colour;
  $govuk-inverse-button-text-colour: $govuk-inverse-button-text-colour;
  $govuk-inverse-button-hover-colour: govuk-tint($govuk-inverse-button-text-colour, 90%);
  $govuk-inverse-button-shadow-colour: govuk-shade($govuk-inverse-button-text-colour, 30%);

  // Because the shadow (s0) is visually 'part of' the button, we need to reduce
  // the height of the button to compensate by adjusting its padding (s1) and
  // increase the bottom margin to include it (s2).
  $button-shadow-size: $govuk-border-width-form-element;

  .govuk-button {
    @include govuk-font($size: 16, $line-height: 19px, $weight: bold);

    box-sizing: border-box;
    display: inline-block;
    position: relative;
    width: 100%;
    margin-top: 0;
    margin-right: 0;
    margin-left: 0;
    @include govuk-responsive-margin(6, "bottom", $adjustment: $button-shadow-size); // s2
    padding: (govuk-spacing(2) - $govuk-border-width-form-element) govuk-spacing(2)
      (govuk-spacing(2) - $govuk-border-width-form-element - ($button-shadow-size / 2)); // s1
    border: $govuk-border-width-form-element solid transparent;
    border-radius: 5px;
    color: $govuk-button-text-colour;
    background-color: $govuk-button-colour;
    text-align: center;
    vertical-align: top;
    cursor: pointer;
    -webkit-appearance: none;

    @include govuk-media-query($from: tablet) {
      width: auto;
    }

    &:focus-visible {
      z-index: 10;
      outline: govuk-colour("orange") solid 3px;
      outline-offset: 2px;
    }

    // Ensure that any global link styles are overridden

    // Fix unwanted button padding in Firefox
    &::-moz-focus-inner {
      padding: 0;
      border: 0;
    }

    &:hover {
      box-shadow: 0 0 0 2px #000000;
    }

    // &:active {
    //  // Bump the button down so it looks like its being pressed in
    //  //top: $button-shadow-size;
    //  background-color: #072c66;
    // }

    // The following adjustments do not work for <input type="button"> as
    // non-container elements cannot include pseudo elements (i.e. ::before).

    // Use a pseudo element to expand the click target area to include the
    // button's shadow as well, in case users try to click it.
    &::before {
      content: "";
      display: block;

      position: absolute;

      top: -$govuk-border-width-form-element;
      right: -$govuk-border-width-form-element;
      bottom: -($govuk-border-width-form-element + $button-shadow-size);
      left: -$govuk-border-width-form-element;

      background: transparent;
    }

    // When the button is active it is shifted down by $button-shadow-size to
    // denote a 'pressed' state. If the user happened to click at the very top
    // of the button, their mouse is no longer over the button (because it has
    // 'moved beneath them') and so the click event is not fired.
    //
    // This corrects that by shifting the top of the pseudo element so that it
    // continues to cover the area that the user originally clicked, which means
    // the click event is still fired.
    //
    // ðŸŽ‰
    &:active::before {
      top: -($govuk-border-width-form-element + $button-shadow-size);
    }

    &[disabled] {
      background-color: govuk-colour("greyN500");
      box-shadow: none;
      cursor: not-allowed;
    }

    &__basic {
      &:active {
        background-color: govuk-colour("dark-blue");
      }

      &[disabled] {
        background-color: govuk-colour("greyN500");
        box-shadow: none;
        cursor: not-allowed;
      }
    }

    &__success {
      background-color: govuk-colour("green");

      &:hover {
        box-shadow: 0 0 0 2px govuk-colour("dark-green");
      }

      &:active {
        background: govuk-colour("dark-green");
      }
    }

    &__warning {
      background-color: $govuk-warning-button-colour;

      &:hover {
        box-shadow: 0 0 0 2px govuk-colour("dark-red");
      }

      &:active {
        background: govuk-colour("dark-red");
      }
    }

    &--sec {
      border: 2px solid govuk-colour("blue");
      color: govuk-colour("dark-blue");
      background-color: govuk-colour("light-blue");

      &[disabled] {
        border-color: transparent;
        color: govuk-colour("dark-grey");
        background: none;
        box-shadow: none;

        &:hover {
          box-shadow: none;
          cursor: not-allowed;
        }

        &:active {
          border-color: transparent;
        }
      }

      &:hover {
        box-shadow: 0 0 0 2px govuk-colour("blue");
      }

      &:active {
        border-color: govuk-colour("dark-blue");
        box-shadow: 0 0 0 2px govuk-colour("dark-blue");
      }

      &__success {
        border-color: govuk-colour("green");
        color: govuk-colour("dark-green");
        background: govuk-colour("light-green");

        &:hover {
          box-shadow: 0 0 0 2px govuk-colour("green");
        }

        &:active {
          border-color: govuk-colour("dark-green");
          box-shadow: 0 0 0 2px govuk-colour("dark-green");
        }
      }

      &__warning {
        border-color: govuk-colour("red");
        color: govuk-colour("dark-red");
        background: govuk-colour("light-red");

        &:hover {
          box-shadow: 0 0 0 2px govuk-colour("red");
        }

        &:active {
          border-color: govuk-colour("dark-red");
          box-shadow: 0 0 0 2px govuk-colour("dark-red");
        }
      }

      &__contrast {
        border-color: govuk-colour("blue");
        color: govuk-colour("blue");
        background: govuk-colour("greyN200");

        &:hover {
          box-shadow: 0 0 0 2px govuk-colour("blue");
        }

        &:active {
          border-color: govuk-colour("medium-blue");
          color: govuk-colour("medium-blue");
          box-shadow: none;
        }
      }
    }

    &--texted {
      border: none;
      color: govuk-colour("blue");
      background-color: transparent;
      text-decoration: underline;

      &:hover {
        color: govuk-colour("dark-grey");
        background-color: transparent;
        box-shadow: none;
        text-decoration: underline;
      }

      &__success {
        color: govuk-colour("green");

        &:hover {
          color: govuk-colour("dark-green");
        }
      }

      &__warning {
        color: govuk-colour("red");

        &:hover {
          color: govuk-colour("dark-red");
        }
      }

      &__contrast {
        color: govuk-colour("blue");

        &:hover {
          color: govuk-colour("dark-blue");
        }
      }
    }

    &__large {
      padding: 0.75rem 1.25rem;
    }
  }

  .govuk-button--start {
    @include govuk-typography-weight-bold;
    @include govuk-font-size($size: 24, $line-height: 1);

    display: inline-flex;
    min-height: auto;

    justify-content: center;
  }

  .govuk-button__start-icon {
    margin-left: govuk-spacing(1);

    @include govuk-media-query($from: desktop) {
      margin-left: govuk-spacing(2);
    }
    vertical-align: middle;
    flex-shrink: 0;
    align-self: center;
    // Work around SVGs not inheriting color from parent in forced color mode
    // (https://github.com/w3c/csswg-drafts/issues/6310)
    forced-color-adjust: auto;
  }
}
